local a="LibMapPing"local b;if not LibStub then b={}else b=LibStub:NewLibrary(a,12)if not b then return end end;local c;if LibDebugLogger then c=LibDebugLogger.Create(a)else local function d()end;c=setmetatable({},{__index=function()return d end})end;local e=2.15;local f=39;local g=0.512;local h=100;local i=10;local j=3;local k=10;local l=ZO_Object:Subclass()function l:New(...)local m=ZO_Object.New(self)m:Initialize(...)return m end;function l:Initialize(n,o)self.timeframe=n;self.resolution=o;self.count=n*o;self.sumList={}self.lastIndex=self:GetCurrentIndex()for p=1,self.count do self.sumList[p]=0 end end;function l:GetCurrentIndex()return math.floor(self.resolution*GetGameTimeMilliseconds()/1000)%self.count end;function l:Increment()local q=self:GetCurrentIndex()while self.lastIndex~=q do self.lastIndex=(self.lastIndex+1)%self.count;self.sumList[self.lastIndex]=0 end;self.sumList[q]=self.sumList[q]+1 end;function l:GetAverage()local q=self:GetCurrentIndex()local r=0;for p=1,self.count do if p~=q then r=r+self.sumList[p]end end;return math.floor(r/(self.count-1)*self.resolution)end;local s=ZO_Object:Subclass()function s:New(...)local m=ZO_Object.New(self)m:Initialize(...)return m end;function s:Initialize()self.average=l:New(j,k)self.size=h;self.generatedTokens=1/g;self.safetyThreshold=i;self.left=self.size;self.lastCheck=GetGameTimeMilliseconds()end;function s:GetTokensLeft()local t=GetGameTimeMilliseconds()local r=self.average:GetAverage()local u=IsUnitInCombat("player")and f or e;local v=r*u;local w=(t-self.lastCheck)/1000;self.left=math.min(self.left+w*self.generatedTokens,self.size)self.lastCheck=t;return self.left end;function s:HasTokensLeft()return self:GetTokensLeft()>self.safetyThreshold end;function s:Take()if self:HasTokensLeft()then self.left=self.left-1;self.average:Increment()return true end;return false end;local MAP_PIN_TYPE_PLAYER_WAYPOINT=MAP_PIN_TYPE_PLAYER_WAYPOINT;local MAP_PIN_TYPE_PING=MAP_PIN_TYPE_PING;local MAP_PIN_TYPE_RALLY_POINT=MAP_PIN_TYPE_RALLY_POINT;local x="waypoint"local y="rally"local z="pings"local A=400;local B={[MAP_PIN_TYPE_PLAYER_WAYPOINT]=x,[MAP_PIN_TYPE_RALLY_POINT]=y}local C,D,E;local F={}local G={}b.MAP_PING_NOT_SET=0;b.MAP_PING_NOT_SET_PENDING=1;b.MAP_PING_SET_PENDING=2;b.MAP_PING_SET=3;b.mutePing=b.mutePing or{}b.suppressPing=b.suppressPing or{}b.pingState=b.pingState or{}b.pendingPing=b.pendingPing or{}b.cm=b.cm or ZO_CallbackObject:New()b.bucket=s:New()local H=b.mapPinManager;local function I(J)return B[J]or GetGroupUnitTagByIndex(GetGroupIndexByUnitTag("player"))or""end;local function K(J,L)L=L or I(J)return string.format("%d_%s",J,L)end;local function M(N,O,J,L,P,Q,R)local S=K(J,L)local T=b.pendingPing[S]if T and T[1]==O then b.pendingPing[S]=nil end;if O==PING_EVENT_ADDED then c:Debug("Ping added",S)b.cm:FireCallbacks("BeforePingAdded",J,L,P,Q,R)b.pingState[S]=b.MAP_PING_SET;H:RemovePins(z,J,L)if not b:IsPingSuppressed(J,L)then c:Debug("Create pin")H:CreatePin(J,L,P,Q)if R and not b:IsPingMuted(J,L)then c:Debug("Play sound")PlaySound(SOUNDS.MAP_PING)end end;b.cm:FireCallbacks("AfterPingAdded",J,L,P,Q,R)elseif O==PING_EVENT_REMOVED then c:Debug("Ping removed",S)b.cm:FireCallbacks("BeforePingRemoved",J,L,P,Q,R)b.pingState[S]=b.MAP_PING_NOT_SET;H:RemovePins(z,J,L)if R and not b:IsPingSuppressed(J,L)and not b:IsPingMuted(J,L)then c:Debug("Play sound")PlaySound(SOUNDS.MAP_PING_REMOVE)end;b.cm:FireCallbacks("AfterPingRemoved",J,L,P,Q,R)end end;local function U()EVENT_MANAGER:UnregisterForUpdate(a)for S,T in pairs(b.pendingPing)do local O,J,P,Q,V=unpack(T)local L=I(J)if GetCurrentMapZoneIndex()~=V then b:SuppressPing(J,L)end;M(0,O,J,L,P,Q,true)b.pendingPing[S]=nil;b.mutePing[S]=0;b.suppressPing[S]=0 end end;local function W(S,...)b.pendingPing[S]={...}EVENT_MANAGER:UnregisterForUpdate(a)EVENT_MANAGER:RegisterForUpdate(a,A,U)end;local function X(J,Y,P,Q)if J==MAP_PIN_TYPE_PING and not IsUnitGrouped("player")then return end;if J==MAP_PIN_TYPE_PLAYER_WAYPOINT or b.bucket:Take()then local S=K(J)b.pingState[S]=b.MAP_PING_SET_PENDING;W(S,PING_EVENT_ADDED,J,P,Q,GetCurrentMapZoneIndex())return C(J,Y,P,Q)end end;local function Z()if b:IsPingSuppressed(MAP_PIN_TYPE_PLAYER_WAYPOINT,x)then return 0,0 end;return F[MAP_PIN_TYPE_PLAYER_WAYPOINT]()end;local function _(L)if b:IsPingSuppressed(MAP_PIN_TYPE_PING,L)then return 0,0 end;return F[MAP_PIN_TYPE_PING](L)end;local function a0()if b:IsPingSuppressed(MAP_PIN_TYPE_RALLY_POINT,y)then return 0,0 end;return F[MAP_PIN_TYPE_RALLY_POINT]()end;local function a1()local S=K(MAP_PIN_TYPE_PLAYER_WAYPOINT,x)b.pingState[S]=b.MAP_PING_NOT_SET_PENDING;W(S,PING_EVENT_REMOVED,MAP_PIN_TYPE_PLAYER_WAYPOINT,0,0,GetCurrentMapZoneIndex())return D()end;local function a2()PingMap(MAP_PIN_TYPE_PING,MAP_TYPE_LOCATION_CENTERED,0,0)end;local function a3()local S=K(MAP_PIN_TYPE_RALLY_POINT,y)b.pingState[S]=b.MAP_PING_NOT_SET_PENDING;W(S,PING_EVENT_REMOVED,MAP_PIN_TYPE_RALLY_POINT,0,0)E()end;function b:SetMapPing(J,Y,P,Q)PingMap(J,Y,P,Q)end;function b:RemoveMapPing(J)if G[J]then G[J]()end end;function b:GetMapPing(J,L)local P,Q=0,0;if F[J]then P,Q=F[J](L or I(J))end;return P,Q end;function b:GetMapPingState(J,L)local S=K(J,L)local a4=b.pingState[S]if a4==nil then local P,Q=b:GetMapPing(J,L)a4=(P~=0 or Q~=0)and b.MAP_PING_SET or b.MAP_PING_NOT_SET;b.pingState[S]=a4 end;return b.pingState[S]end;function b:HasMapPing(J,L)local a4=b:GetMapPingState(J,L)return a4==b.MAP_PING_SET_PENDING or a4==b.MAP_PING_SET end;function b:RefreshMapPin(J,L)if not H then c:Info("PinManager not available. Using ZO_WorldMap_UpdateMap instead.")ZO_WorldMap_UpdateMap()return true end;L=L or I(J)H:RemovePins(z,J,L)local P,Q=b:GetMapPing(J,L)if b:IsPositionOnMap(P,Q)then H:CreatePin(J,L,P,Q)return true end;return false end;function b:IsPositionOnMap(P,Q)return not(P<0 or Q<0 or P>1 or Q>1 or P==0 and Q==0)end;function b:MutePing(J,L)local S=K(J,L)local a5=b.mutePing[S]or 0;b.mutePing[S]=a5+1;c:Debug("Mute ping %s - new count: %d",S,b.mutePing[S])end;function b:UnmutePing(J,L)local S=K(J,L)local a5=(b.mutePing[S]or 0)-1;if a5<0 then a5=0 end;b.mutePing[S]=a5;c:Debug("Unmute ping %s - new count: %d",S,b.mutePing[S])end;function b:IsPingMuted(J,L)local S=K(J,L)return b.mutePing[S]and b.mutePing[S]>0 end;function b:SuppressPing(J,L)local S=K(J,L)local a6=b.suppressPing[S]or 0;b.suppressPing[S]=a6+1;c:Debug("Suppress ping %s - new count: %d",S,b.suppressPing[S])end;function b:UnsuppressPing(J,L)local S=K(J,L)local a6=(b.suppressPing[S]or 0)-1;if a6<0 then a6=0 end;b.suppressPing[S]=a6;c:Debug("Unsuppress ping %s - new count: %d",S,b.suppressPing[S])end;function b:IsPingSuppressed(J,L)local S=K(J,L)return b.suppressPing[S]and b.suppressPing[S]>0 end;local function a7()if H then return end;local a8=ZO_WorldMapPins.RefreshCustomPins;function ZO_WorldMapPins:RefreshCustomPins()H=self;b.mapPinManager=self end;ZO_WorldMap_RefreshCustomPinsOfType()ZO_WorldMapPins.RefreshCustomPins=a8 end;function b:RegisterCallback(a9,aa)b.cm:RegisterCallback(a9,aa)end;function b:UnregisterCallback(a9,aa)b.cm:UnregisterCallback(a9,aa)end;local function ab()EVENT_MANAGER:UnregisterForEvent(a,EVENT_ADD_ON_LOADED)EVENT_MANAGER:UnregisterForEvent(a,EVENT_MAP_PING)PingMap=C;GetMapPlayerWaypoint=F[MAP_PIN_TYPE_PLAYER_WAYPOINT]GetMapPing=F[MAP_PIN_TYPE_PING]GetMapRallyPoint=F[MAP_PIN_TYPE_RALLY_POINT]RemovePlayerWaypoint=D;RemoveRallyPoint=E end;local function ac()a7()C=PingMap;PingMap=X;F[MAP_PIN_TYPE_PLAYER_WAYPOINT]=GetMapPlayerWaypoint;F[MAP_PIN_TYPE_PING]=GetMapPing;F[MAP_PIN_TYPE_RALLY_POINT]=GetMapRallyPoint;GetMapPlayerWaypoint=Z;GetMapPing=_;GetMapRallyPoint=a0;D=RemovePlayerWaypoint;E=RemoveRallyPoint;RemovePlayerWaypoint=a1;RemoveRallyPoint=a3;G[MAP_PIN_TYPE_PLAYER_WAYPOINT]=a1;G[MAP_PIN_TYPE_PING]=a2;G[MAP_PIN_TYPE_RALLY_POINT]=a3;EVENT_MANAGER:RegisterForEvent(a,EVENT_ADD_ON_LOADED,function(ad,ae)if ae=="ZO_Ingame"then EVENT_MANAGER:UnregisterForEvent(a,EVENT_ADD_ON_LOADED)EVENT_MANAGER:UnregisterForEvent("ZO_WorldMap",EVENT_MAP_PING)EVENT_MANAGER:RegisterForEvent(a,EVENT_MAP_PING,M)end end)b.Unload=ab end;if b.Unload then b.Unload()end;ac()LibMapPing=b